#데이터 불러오기
import pandas as pd

wine = pd.read_csv("http://bit.ly/wine_csv_data")

#wine 데이터 확인
wine.head()

#데이터 타입과 누락된 데이터가 있는지 확인
wine.info()

#간략한 통계 출력
wine.describe()

#넘파이 배열로 바꾸기
data = wine[['alcohol', 'sugar', 'pH']].to_numpy()
target = wine['class'].to_numpy()

#훈련 세트와 테스트 세트 나누기
from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(
    data, target, test_size = 0.2, random_state = 42)

#훈련 세트와 테스트 세트의 크기 확인
print(train_input.shape, test_input.shape)

#훈련 세트 전처리 (표준점수 변환)
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(train_input)

train_scaled = ss.transform(train_input)
test_scaled = ss.transform(test_input)

#로지스틱 회귀 모델 훈련
from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()
lr.fit(train_scaled, train_target)

print(lr.score(train_scaled, train_target))
print(lr.score(test_scaled, test_target))

#로지스틱 회귀가 학습한 계수와 절편
print(lr.coef_, lr.intercept_)

#결정트리
from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier(random_state = 42)
dt.fit(train_scaled, train_target)

print(dt.score(train_scaled, train_target))
print(dt.score(test_scaled, test_target))

#어떤 트리가 만들어졌는지 확인
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

plt.figure(figsize = (10, 7))
plot_tree(dt)
plt.show()

#트리의 깊이를 제한해서 출력
plt.figure(figsize = (10, 7))
plot_tree(dt, max_depth = 1, filled = True, feature_names = ['alcohol', 'sugar', 'pH'])
plt.show()

#가지치기
dt = DecisionTreeClassifier(max_depth = 3, random_state = 42)
dt.fit(train_scaled, train_target)

print(dt.score(train_scaled, train_target))
print(dt.score(test_scaled, test_target))

#트리 그래프 그리기
plt.figure(figsize = (20, 15))

plot_tree(dt, filled = True, feature_names = ['alcohol', 'sugar', 'pH'])
plt.show()

#전처리하기 전의 훈련 세트와 테스트 세트로 다시 훈련
dt = DecisionTreeClassifier(max_depth = 3, random_state = 42)

dt.fit(train_input, train_target)

print(dt.score(train_input, train_target))
print(dt.score(test_input, test_target))

#결정트리
plt.figure(figsize = (20, 15))

plot_tree(dt, filled = True, feature_names = ['alcohol', 'sugar', 'pH'])
plt.show()

#특성 중요도 출력
print(dt.feature_importances_)
